# otel-collector-config.yaml
# OpenTelemetry Collector - Configuración Central

receivers:
  # Recibir telemetría de agentes vía OTLP
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

processors:
  # Agrupar datos en lotes para eficiencia
  batch:
    timeout: 10s
    send_batch_size: 1024
    send_batch_max_size: 2048
  
  # Agregar metadata adicional
  attributes:
    actions:
      - key: collector.name
        value: central-collector
        action: insert
      - key: environment
        value: production
        action: insert
  
  # Filtrar datos sin customer_id (multi-tenancy)
  filter:
    error_mode: ignore
    traces:
      span:
        - 'attributes["customer.id"] == nil'
    metrics:
      datapoint:  # Filtrar a nivel de datapoint es más eficiente
        - 'resource.attributes["customer.id"] == nil'
  
  # Limitar uso de memoria
  memory_limiter:
    check_interval: 1s
    limit_mib: 512
    spike_limit_mib: 128

exporters:
  # Exportar para debugging
  debug:
    verbosity: detailed
    sampling_initial: 5
    sampling_thereafter: 200
  
  # Exportar métricas a Prometheus (hot storage)
  prometheus:
    endpoint: "0.0.0.0:8889"
    namespace: "customer_monitoring"
    # const_labels removidos para evitar conflicto con attributes processor
    # Los labels environment y collector.name vienen de resource attributes
  
  # Exportar a Cassandra (cold storage) - Requiere adapter
  # otlphttp/cassandra:
  #   endpoint: "http://cassandra-adapter:8080/v1/traces"
  #   tls:
  #     insecure: true

extensions:
  # Health check endpoint
  health_check:
    endpoint: "0.0.0.0:13133"
    path: "/health"
  
  # Métricas internas del collector
  zpages:
    endpoint: "0.0.0.0:55679"

service:
  extensions: [health_check, zpages]
  
  pipelines:
    # Pipeline de trazas
    traces:
      receivers: [otlp]
      processors: [memory_limiter, attributes, filter, batch]
      exporters: [debug]  # [debug, otlphttp/cassandra] cuando Cassandra esté configurado
    
    # Pipeline de métricas
    metrics:
      receivers: [otlp]
      processors: [memory_limiter, attributes, filter, batch]
      exporters: [debug, prometheus]
    
    # Pipeline de logs
    logs:
      receivers: [otlp]
      processors: [memory_limiter, attributes, batch]
      exporters: [debug]
