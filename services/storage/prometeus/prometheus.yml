# prometheus.yml
# Configuración de Prometheus para almacenamiento Hot (30 días)

global:
  # Intervalo de scrape por defecto
  scrape_interval: 15s
  
  # Cuánto tiempo esperar antes de marcar un scrape como fallido
  scrape_timeout: 10s
  
  # Intervalo de evaluación de reglas de alertas
  evaluation_interval: 15s
  
  # Labels externos agregados a todas las métricas
  external_labels:
    cluster: 'production'
    replica: 'prometheus-01'

# Configuración de alerting (opcional, puedes agregar Alertmanager después)
# alerting:
#   alertmanagers:
#     - static_configs:
#         - targets:
#           - alertmanager:9093

# Archivos de reglas de alertas (crear después)
rule_files:
  # - "alerts/*.yml"

# Configuración de scrape
scrape_configs:
  # Job 1: Scrape del OpenTelemetry Collector
  # El collector expone métricas en formato Prometheus en el puerto 8889
  - job_name: 'otel-collector-metrics'
    static_configs:
      - targets: ['host.docker.internal:8889']  # Usar host en lugar de nombre de container
        labels:
          service: 'otel-collector'
          environment: 'production'
    
    # Scrape cada 15 segundos (tiempo real)
    scrape_interval: 5s
    scrape_timeout: 5s
    
    # Opcional: autenticación básica si la configuras
    # basic_auth:
    #   username: 'prometheus'
    #   password: 'secure_password'

  # Job 2: Métricas internas de Prometheus (self-monitoring)
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
        labels:
          service: 'prometheus'

  # Job 3: Node Exporter (si quieres métricas del host)
  # - job_name: 'node-exporter'
  #   static_configs:
  #     - targets: ['node-exporter:9100']

# Configuración de almacenamiento (storage)
# Nota: Estas flags se pasan como argumentos al comando, no en este archivo
# Pero las documentamos aquí para referencia:
#
# --storage.tsdb.path=/prometheus/data
#   └─ Directorio donde se almacenan los datos
#
# --storage.tsdb.retention.time=30d
#   └─ Retener datos por 30 días (hot storage)
#
# --storage.tsdb.retention.size=50GB
#   └─ Límite de tamaño del almacenamiento
#
# --storage.tsdb.wal-compression=true
#   └─ Comprimir el Write-Ahead Log para ahorrar espacio

# Configuración de remote_write (para enviar a Cassandra en el futuro)
# remote_write:
#   - url: "http://cassandra-adapter:9201/write"
#     queue_config:
#       capacity: 10000
#       max_shards: 50
#       max_samples_per_send: 5000
#       batch_send_deadline: 5s
